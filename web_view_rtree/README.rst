==========
RTree View
==========

.. 
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !! This file is generated by oca-gen-addon-readme !!
   !! changes will be overwritten.                   !!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !! source digest: sha256:4b42802dfbb85d33f399136a380c5be2f98f6cc1de03edc31f5dcbdb87ddbec0
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

.. |badge1| image:: https://img.shields.io/badge/maturity-Alpha-red.png
    :target: https://odoo-community.org/page/development-status
    :alt: Alpha
.. |badge2| image:: https://img.shields.io/badge/licence-AGPL--3-blue.png
    :target: http://www.gnu.org/licenses/agpl-3.0-standalone.html
    :alt: License: AGPL-3
.. |badge3| image:: https://img.shields.io/badge/github-OCA%2Fweb-lightgray.png?logo=github
    :target: https://github.com/OCA/web/tree/16.0/web_view_rtree
    :alt: OCA/web
.. |badge4| image:: https://img.shields.io/badge/weblate-Translate%20me-F47D42.png
    :target: https://translation.odoo-community.org/projects/web-16-0/web-16-0-web_view_rtree
    :alt: Translate me on Weblate
.. |badge5| image:: https://img.shields.io/badge/runboat-Try%20me-875A7B.png
    :target: https://runboat.odoo-community.org/builds?repo=OCA/web&target_branch=16.0
    :alt: Try me on Runboat

|badge1| |badge2| |badge3| |badge4| |badge5|

This module defines a new rtree view type. RTree stands for “real tree” or
“recursive tree”. It allows to display recursive and hierarchical data
structures.

An rtree view defined for a model displays records of that model as regular
records rows, just like the regular list (“tree”) view. The difference is that
records can have parents and children, and the first non-widget column
displays the tree structure using carets that allow to expand and collapse
the children of a record. That column also displays the number of children if
there are any.

Additionally, the rtree view can display records of other models in the tree
structure. These records appear as rows with (by default) only their
``display_name`` displayed in the first non-widget column. Other fields of
these secondary models can be mapped to those of the primary model to be
displayed in the corresponding columns.

.. figure:: https://raw.githubusercontent.com/OCA/web/16.0/web_view_rtree/static/description/rtree.png
   :alt: An example rtree view displaying projects and tasks

.. IMPORTANT::
   This is an alpha version, the data model and design can change at any time without warning.
   Only for development or testing purpose, do not use in production.
   `More details on development status <https://odoo-community.org/page/development-status>`_

**Table of contents**

.. contents::
   :local:

Usage
=====

To use the rtree view on a model, a view of that type must be defined for that
model. It is defined in the same way as a normal list (tree) view, but using
an ``<rtree>`` element instead of ``<tree>`` and with additional ``<parent>``
elements to define the hierarchy.

Each ``<parent>`` element defines a parent-child relationship to display. It
has the following attributes:

* ``parent``: the parent model of this relationship.
* ``child``: the child model of this relationship.
* ``field``: the field of the child model to access the parent.
* ``domain`` (optional): an optional domain to use when loading the children
  for this relationship.
* ``expand`` (optional): an optional boolean value that controls whether this
  relationship should be expanded automatically (false by default).

The order of the ``<parent>`` elements controls the order of model records on
each level of the tree.

The root of the tree displays all records of all models that have no parent.

Here is an example to display projects with their tasks and sub-tasks
(recursively). At the root, it will display all projects (with only their
``display_name``) followed by all tasks that have no parent and no project (as
regular records, with all fields). Note that the first relationship has a
domain: this is to ensure that only tasks that have no parent will be shown as
children of their project. Moreover, the first relationship has the ``expand``
boolean set to true, while the second hasn't: this means that project rows
will be expanded automatically, but tasks with sub-tasks will not.

.. code-block:: XML

    <record id="project_task_view_rtree" model="ir.ui.view">
        <field name="name">An rtree view for tasks</field>
        <field name="model">project.task</field>
        <field name="arch" type="xml">
            <rtree>
                <parent
                    parent="project.project"
                    child="project.task"
                    field="project_id"
                    domain="[('parent_id', '=', False)]"
                    expand="true"
                />
                <parent
                    parent="project.task"
                    child="project.task"
                    field="parent_id"
                />

                <field name="name" />
                <field name="milestone_id" />
                <!-- add more fields -->
            </rtree>
        </field>
    </record>

To make the view available, the ``rtree`` view mode must be added to the list
of view modes (``view_mode`` field) of the window action.

Filtering
~~~~~~~~~

If the search view defines a search on the ``display_name`` field, using it in
the rtree view will filter all records (of any model) on their
``display_name``. This uses the ``name_search()`` model method.

Using secondary model fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is possible to use some fields of the secondary models, for example to
allow to reorder those records with a handle widget. This is done by adding
children ``field`` elements to the corresponding ``field`` element of the
view. For example, this would allow to reorder projects as well as tasks:

.. code-block:: XML

    <field name="sequence" widget="handle">
        <field model="project.project" name="sequence" />
    </field>

Known issues / Roadmap
======================

Does not work currently:

* Editing records
* Pagination and limiting the number of results
* Sorting of secondary model rows by column
* Navigating between records accessed from the view
* Validation of the view definition

Filtering is only partially supported. A search domain can be used in the
view, but it must be simple (a flat list of conditions without boolean
operators).

Displaying fields of secondary models is limited. It only works with simple
(non-relational) fields of the same type as those of the primary model.

Bug Tracker
===========

Bugs are tracked on `GitHub Issues <https://github.com/OCA/web/issues>`_.
In case of trouble, please check there if your issue has already been reported.
If you spotted it first, help us to smash it by providing a detailed and welcomed
`feedback <https://github.com/OCA/web/issues/new?body=module:%20web_view_rtree%0Aversion:%2016.0%0A%0A**Steps%20to%20reproduce**%0A-%20...%0A%0A**Current%20behavior**%0A%0A**Expected%20behavior**>`_.

Do not contact contributors directly about support or help with technical issues.

Credits
=======

Authors
~~~~~~~

* Coop IT Easy SC

Contributors
~~~~~~~~~~~~

* `Coop IT Easy SC <https://coopiteasy.be>`_:

  * hugues de keyzer

Other credits
~~~~~~~~~~~~~

The development of this module has been funded by `iMio sc
<https://www.imio.be/>`_.

Maintainers
~~~~~~~~~~~

This module is maintained by the OCA.

.. image:: https://odoo-community.org/logo.png
   :alt: Odoo Community Association
   :target: https://odoo-community.org

OCA, or the Odoo Community Association, is a nonprofit organization whose
mission is to support the collaborative development of Odoo features and
promote its widespread use.

This module is part of the `OCA/web <https://github.com/OCA/web/tree/16.0/web_view_rtree>`_ project on GitHub.

You are welcome to contribute. To learn how please visit https://odoo-community.org/page/Contribute.
